@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using RPSSL.Web.Contracts.Choice
@using RPSSL.Web.Domain.Models
@using RPSSL.Web.Helpers
@using RPSSL.Web.Services.Abstractions
@using MatBlazor
@inject AuthenticationStateProvider AuthStateProvider
@inject LocalizationManager Localized
@inject IChoiceService ChoiceService
@inject ILocalizationService LocalizationService
@inject IMatToaster Toaster

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (Choices is not null)
{
    <EditForm Model="Play" OnValidSubmit="HandlePlay">
        <div>
            <label class="fw-medium" for="choice">@Localized["Choices"]</label>
            <select disabled="@lockedForm" class="form-control" placeholder=@Localized["Choice"] id="choice" @bind="Play.PlayerChoiceId" ValueExpression="@(() => Play.PlayerChoiceId)">
                @foreach (var choice in Choices)
                {
                    @if (choice.Id == Play.PlayerChoiceId)
                    {
                        <option selected value="@choice.Id">@choice.Name</option>
                    }
                    else
                    {
                        <option value="@choice.Id">@choice.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => Play.PlayerChoiceId)" />
        </div>

        <div>
            @if (lockedForm)
            {
                <button class="btn btn-white btn-outline-primary btn-sm me-0 opacity-50" type="submit" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    @Localized["Ok"]
                </button>
            }
            else
            {
                <button class="btn btn-white btn-outline-primary btn-sm me-0" type="submit">
                    @Localized["Ok"]
                </button>
            }
        </div>

    </EditForm>
}

@code {
    public List<Choice>? Choices { get; set; }
    public PlayGameRequest Play { get; set; } = new();
    private bool lockedForm;

    protected async override Task OnInitializedAsync()
    {
        if (!LocalizationManager.IsInitialized)
        {
            var localizedData = (await LocalizationService.GetLocalizationData(1)).Result;
            LocalizationManager.Initialize(localizedData);
        }

        var getChoicesResult = await ChoiceService.GetChoices(new GetChoicesRequest { Active = true });
        if (!getChoicesResult.IsSuccess)
        {
            Toaster.Add(Localized[getChoicesResult.DetailedMessage], MatToastType.Danger, Localized[getChoicesResult.Message]);
            return;
        }
        Choices = getChoicesResult.Result;
    }

    private async Task<bool> HandlePlay()
    {
        lockedForm = true;

        var gameResult = await ChoiceService.PlayGame(Play);
        if (!gameResult.IsSuccess)
        {
            Toaster.Add(Localized[gameResult.DetailedMessage], MatToastType.Danger, Localized[gameResult.Message]);
            lockedForm = false;
            return await Task.FromResult(false);
        }

        switch (gameResult.Result.Results)
        {
            case "Lose":
                Toaster.Add(Localized["YouLost"], MatToastType.Danger, Localized["YouLost"]);
                break;
            case "Win":
                Toaster.Add(Localized["YouWon"], MatToastType.Success, Localized["YouWon"]);
                break;
            default:
                Toaster.Add(Localized["Tie"], MatToastType.Secondary, Localized["Tie"]);
                break;
        }

        lockedForm = false;
        return await Task.FromResult(true);
    }
}
